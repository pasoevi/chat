{"version":3,"sources":["App.module.scss","components/SendMessage/SendMessage.module.scss","components/Message/Message.tsx","store/system/types.ts","components/Chat/Chat.tsx","engine/websockets.ts","store/chat/actions.ts","store/chat/types.ts","components/SendMessage/SendMessage.tsx","App.tsx","serviceWorker.ts","store/system/reducers.ts","store/chat/reducers.ts","store/index.ts","localStorage/localStorage.ts","store/middleware/loggerMiddleware.ts","index.tsx","components/Message/Message.module.scss"],"names":["module","exports","MessageComponent","React","memo","text","sender","classes","id","timestamp","classNames","styles","className","Chat","props","messages","useSelector","state","chat","map","message","key","socket","io","sendMessage","type","payload","newMessage","v4","Date","now","displayName","emit","SendMessage","dispatch","useDispatch","useState","messageText","setMessageText","onSubmit","e","preventDefault","onChange","target","value","App","bottom","defaultProps","Boolean","window","location","hostname","match","initialState","loggedIn","session","currentUser","store","rootReducer","combineReducers","system","action","filter","meta","persistedState","serializedState","localStorage","getItem","JSON","parse","err","loadState","configureStore","reducer","middleware","getDefaultMiddleware","api","next","console","log","getState","devTools","process","preloadedState","subscribe","stringify","setItem","saveState","on","rootElement","document","getElementById","Sentry","dsn","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.b5e5a76b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1GZUT\",\"bottom\":\"App_bottom__t4iXx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sendMessage\":\"SendMessage_sendMessage__8pYZL\"};","import React from \"react\";\r\nimport classNames from \"classnames\";\r\nimport styles from \"./Message.module.scss\";\r\nimport { Message } from \"../../store/chat/types\";\r\nimport { CURRENT_USER_ID } from \"../../store/system/types\";\r\n\r\nexport interface MessageProps extends Message {}\r\n\r\nexport const MessageComponent: React.FC<MessageProps> = React.memo(\r\n    ({ text, sender, id, timestamp }) => {\r\n        const classes = classNames(styles.message, {\r\n            [styles.sent]: sender.id === CURRENT_USER_ID,\r\n        });\r\n        return <div className={classes}>{text}</div>;\r\n    },\r\n);\r\n","export const CURRENT_USER_ID = \"0\";\n\nexport interface User {\n    id: string;\n    displayName: string;\n}\n\n// Describing the shape of the system's slice of state\nexport interface SystemState {\n    loggedIn: boolean;\n    session: string;\n    currentUser: User;\n}\n\n// Describing the different ACTION NAMES available\nexport const UPDATE_SESSION = \"UPDATE_SESSION\";\n\ninterface UpdateSessionAction {\n    type: typeof UPDATE_SESSION;\n    payload: SystemState;\n}\n\nexport type SystemActionTypes = UpdateSessionAction;\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { MessageComponent } from \"../Message/Message\";\r\nimport { AppState } from \"../../store\";\r\n\r\nexport interface ChatProps {}\r\n\r\nexport const Chat: React.FC<ChatProps> = (props) => {\r\n    const messages = useSelector((state: AppState) => state.chat.messages);\r\n    return (\r\n        <div className=\"chat\">\r\n            {messages.map((message) => (\r\n                <MessageComponent\r\n                    text={message.text}\r\n                    sender={message.sender}\r\n                    timestamp={message.timestamp}\r\n                    id={message.id}\r\n                    key={message.id}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n","import io from \"socket.io-client\";\r\nimport { temporaryAny } from \"../types\";\r\nimport { RECEIVE_MESSAGE } from \"../store/chat/types\";\r\nimport { Message } from \"../store/chat/types\";\r\nimport { CURRENT_USER_ID } from \"../store/system/types\";\r\nimport { messageReceived } from \"../store/chat/actions\";\r\n\r\nconst SERVER_MESSAGE_BROADCAST = \"SERVER_MESSAGE_BROADCAST\";\r\nexport const CLIENT_MESSAGE_SEND = \"CLIENT_MESSAGE_SEND\";\r\n\r\nconst uri = \"http://localhost:5000\";\r\n\r\nconst messageTypes = {\r\n    CHAT_MESSAGE: true,\r\n};\r\n\r\nconst socket = io();\r\nexport const init = (store: temporaryAny) => {\r\n    socket.on(SERVER_MESSAGE_BROADCAST, (payload: Message) => {\r\n        // if (payload.sender.id !== CURRENT_USER_ID) {\r\n        return store.dispatch(messageReceived(payload));\r\n        //}\r\n    });\r\n};\r\n// Object.keys(messageTypes).forEach((type) =>\r\n// );\r\n//};\r\n\r\nexport const emit = (type: string, payload: Message) =>\r\n    socket.emit(type, payload);\r\n","import { v4 } from \"node-uuid\";\nimport { SEND_MESSAGE, DELETE_MESSAGE, RECEIVE_MESSAGE, Message } from \"./types\";\nimport { CURRENT_USER_ID } from \"../system/types\";\nimport { emit, CLIENT_MESSAGE_SEND } from \"../../engine/websockets\";\n\nexport function sendMessage(text: string) {\n    const newMessage = {\n        text,\n        id: v4(),\n        timestamp: Date.now(),\n        sender: { id: CURRENT_USER_ID, displayName: \"You\" },\n    };\n    emit(CLIENT_MESSAGE_SEND, newMessage);\n    return {\n        type: SEND_MESSAGE,\n        payload: newMessage,\n    };\n}\n\n// Action Creators\nexport function messageReceived(message: Message) {\n    return { type: RECEIVE_MESSAGE, payload: message };\n}\n\n// side effects, only as applicable\n// e.g. thunks, epics, etc\n/* export function receiveMessages() {\n    return (dispatch: temporaryAny) =>\n        fetch(\"/messages\")\n            .then((res) => res.json())\n            .then((message: Message) => dispatch(messageReceived()));\n}\n */\nexport function deleteMessage(timestamp: number) {\n    return {\n        type: DELETE_MESSAGE,\n        meta: {\n            timestamp,\n        },\n    };\n}\n","import { User } from \"../system/types\";\n\nexport interface Message {\n    id: string;\n    sender: User;\n    text: string;\n    timestamp: number;\n}\n\nexport interface ChatState {\n  messages: Message[];\n}\n\n// Describing the different ACTION NAMES available\nexport const SEND_MESSAGE = \"SEND_MESSAGE\";\nexport const RECEIVE_MESSAGE = \"RECEIVE_MESSAGE\";\nexport const DELETE_MESSAGE = \"DELETE_MESSAGE\";\n\ninterface SendMessageAction {\n  type: typeof SEND_MESSAGE;\n  payload: Message;\n}\n\ninterface ReceiveMessageAction {\n  type: typeof RECEIVE_MESSAGE;\n  payload: Message;\n}\n\ninterface DeleteMessageAction {\n  type: typeof DELETE_MESSAGE;\n  meta: {\n    timestamp: number;\n  };\n}\n\nexport type ChatActionTypes = SendMessageAction | ReceiveMessageAction | DeleteMessageAction;\n","import React, { useState, ChangeEvent, FormEvent } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport styles from \"./SendMessage.module.scss\";\r\nimport { sendMessage } from \"../../store/chat/actions\";\r\n\r\ninterface SendMessageProps {\r\n    message?: string;\r\n}\r\n\r\nconst defaultProps: SendMessageProps = {\r\n    message: \"\",\r\n};\r\n\r\nexport const SendMessage: React.FC<SendMessageProps> = (props) => {\r\n    const dispatch = useDispatch();\r\n    const { message } = props;\r\n    const [messageText, setMessageText] = useState(message ?? \"\");\r\n\r\n    function handleTextInputChange(e: ChangeEvent<HTMLInputElement>) {\r\n        setMessageText(e.target.value);\r\n    }\r\n\r\n    function handleSendMessage(e: FormEvent<HTMLFormElement>) {\r\n        dispatch(sendMessage(messageText));\r\n        setMessageText(\"\");\r\n        e.preventDefault();\r\n    }\r\n\r\n    return (\r\n        <form className={styles.sendMessage} onSubmit={handleSendMessage}>\r\n            <label>\r\n                <input\r\n                    type=\"textarea\"\r\n                    onChange={handleTextInputChange}\r\n                    value={messageText}\r\n                />\r\n            </label>\r\n            <button type=\"submit\" value=\"Send\">\r\n                Send\r\n            </button>\r\n        </form>\r\n    );\r\n};\r\n\r\nSendMessage.defaultProps = defaultProps;\r\n","import React from \"react\";\nimport styles from \"./App.module.scss\";\nimport { Chat } from \"./components/Chat/Chat\";\nimport { SendMessage } from \"./components/SendMessage/SendMessage\";\n\nexport default function App() {\n    return (\n        <div className=\"App\">\n            <Chat />\n            <div className={styles.bottom}>\n                <SendMessage />\n            </div>\n        </div>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { v4 } from \"node-uuid\";\nimport { UPDATE_SESSION, SystemState, SystemActionTypes } from \"./types\";\n\nconst initialState: SystemState = {\n    loggedIn: false,\n    session: \"\",\n    currentUser: {\n        id: v4(),\n        displayName: \"You\",\n    },\n};\n\nexport function systemReducer(\n    state = initialState,\n    action: SystemActionTypes,\n): SystemState {\n    switch (action.type) {\n        case UPDATE_SESSION: {\n            return {\n                ...state,\n                ...action.payload,\n            };\n        }\n        default:\n            return state;\n    }\n}\n","import {\n    ChatState,\n    SEND_MESSAGE,\n    DELETE_MESSAGE,\n    ChatActionTypes,\n    Message,\n    RECEIVE_MESSAGE,\n} from \"./types\";\nimport { v4 } from \"node-uuid\";\n\nconst mockMessages: Message[] = [\n    {\n        id: \"1\",\n        sender: {id: v4(), displayName: \"Sergo Pasoevi\"},\n        timestamp: Date.now(),\n        text: \"Do you want to bang tonight?\",\n    }/* ,\n    {\n        id: \"2\",\n        author: \"Sergo Pasoevi\",\n        timestamp: Date.now(),\n        text: \"Do you want to bang tonight?\",\n    },\n    {\n        id: \"3\",\n        author: \"You\",\n        timestamp: Date.now(),\n        text: \"Do you want to bang tonight?\",\n    } */,\n];\n\nconst initialState: ChatState = {\n    messages: mockMessages,\n};\n\nexport function chatReducer(\n    state = initialState,\n    action: ChatActionTypes,\n): ChatState {\n    switch (action.type) {\n    case SEND_MESSAGE: {\n        const newMessage: Message = {\n            id: action.payload.id,\n            sender: action.payload.sender,\n            text: action.payload.text,\n            timestamp: action.payload.timestamp,\n        };\n        return {\n            messages: [...state.messages, newMessage],\n        };\n    }\n    case RECEIVE_MESSAGE: {\n        const newMessage: Message = {\n            id: action.payload.id,\n            sender: action.payload.sender,\n            text: action.payload.text,\n            timestamp: action.payload.timestamp,\n        };\n        return {\n            messages: [...state.messages, newMessage],\n        };\n    }\n    case DELETE_MESSAGE:\n        return {\n            messages: state.messages.filter(\n                (message) => message.timestamp !== action.meta.timestamp,\n            ),\n        };\n    default:\n        return state;\n    }\n}\n","import {\n    configureStore,\n    getDefaultMiddleware,\n    ThunkAction,\n    Action,\n} from \"@reduxjs/toolkit\";\nimport { loggerMiddleware } from \"./middleware/loggerMiddleware\";\n\nimport { combineReducers } from \"@reduxjs/toolkit\";\n\nimport { systemReducer } from \"./system/reducers\";\nimport { chatReducer } from \"./chat/reducers\";\nimport { loadState, saveState } from \"../localStorage/localStorage\";\nimport { Message } from \"../components/Message/Message.stories\";\n\n// Actions\nconst defaultAction: Action = {\n    type: \"default\",\n};\n\nexport const rootReducer = combineReducers({\n    system: systemReducer,\n    chat: chatReducer,\n});\n\nexport type AppState = ReturnType<typeof store.getState>;\n\nexport type AppThunk<ReturnType = void> = ThunkAction<\n    ReturnType,\n    AppState,\n    unknown,\n    Action<string>\n>;\n\nconst persistedState = loadState();\n\nexport const store = configureStore({\n    reducer: rootReducer,\n    middleware: [...getDefaultMiddleware(), loggerMiddleware],\n    devTools: process.env.NODE_ENV !== \"production\",\n    preloadedState: persistedState,\n});\n\nstore.subscribe(() => {\n    saveState(store.getState());\n});\n","import { AppState } from \"../store\";\r\n\r\nexport function loadState() {\r\n    try {\r\n        const serializedState = localStorage.getItem(\"state\");\r\n        if (serializedState === null) {\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState);\r\n    } catch (err) {\r\n        return undefined;\r\n    }\r\n}\r\n\r\nexport function saveState(state: AppState) {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem(\"state\", serializedState);\r\n    } catch {\r\n\r\n    }\r\n}","import {\r\n    Action,\r\n    MiddlewareAPI,\r\n    Dispatch,\r\n} from \"@reduxjs/toolkit\";\r\nimport { temporaryAny } from \"../../types\";\r\n\r\nexport const loggerMiddleware: temporaryAny = (\r\n    api: MiddlewareAPI<temporaryAny>,\r\n) => (next: Dispatch<temporaryAny>) => <A extends Action>(action: A) => {\r\n    console.log(\"dispatching\", action);\r\n    console.log(\"next state\", api.getState());\r\n    return next(action);\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as Sentry from \"@sentry/browser\";\nimport { Provider } from \"react-redux\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { store } from \"./store\";\nimport { init as initWS } from \"./engine/websockets\";\n\ninitWS(store);\n\nconst rootElement = document.getElementById(\"root\");\n\nSentry.init({\n    dsn:\n        \"https://d964005f348340158006751922530bf6@o406571.ingest.sentry.io/5274291\",\n});\n\nReactDOM.render(\n    <Provider store={store}>\n        <React.StrictMode>\n            <App />\n        </React.StrictMode>\n    </Provider>,\n    rootElement,\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__1pCCr\",\"sent\":\"Message_sent__181ud\"};"],"sourceRoot":""}